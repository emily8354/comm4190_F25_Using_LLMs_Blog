[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Playing with LLM prompts",
    "section": "",
    "text": "Mind Your Manners\n\n\n\nLLMs\n\nPrompting\n\n\n\nTesting if ChatGPT has better responses if the user is polite\n\n\n\n\n\nSep 10, 2025\n\n\nEmily\n\n\n\n\n\n\n\n\n\n\n\n\nWhat animal do I look like?\n\n\n\nLLMs\n\nPhoto\n\n\n\nUsing ChatGPT to see what animals we look like\n\n\n\n\n\nSep 4, 2025\n\n\nEmily\n\n\n\n\n\n\n\n\n\n\n\n\nMy first post!\n\n\n\nLLMs\n\nPost\n\n\n\nFun, Fabulous, First Post\n\n\n\n\n\nSep 2, 2025\n\n\nEmily\n\n\n\n\n\n\n\n\n\n\n\n\nA test post\n\n\n\nLLMs\n\nprompting\n\nlogic\n\n\n\nAn example post from a Jupyter notebook\n\n\n\n\n\nFeb 2, 2024\n\n\nAn LLM User\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/003_politeness/politeness.html",
    "href": "posts/003_politeness/politeness.html",
    "title": "Mind Your Manners",
    "section": "",
    "text": "While talking to large language models like ChatGPT, you might wonder: does politeness actually matter? After all, these systems are machines and they don’t have feelings. They don’t get annoyed if you forget to say “please” or “thank you.” However, should we still talk to them as if they were other humans? I am trying to explore if the way you phrase your prompts can sometimes change the quality of the responses you get.\n\n\n\nTo test this idea, I designed a small experiment. I created pairs of prompts across 3 different common tasks (like summarization, explaining, and brainstorming). Each pair had a blunt version and a polite version.\nLet’s see the results!\n\n\nsummarize these paragraphs in three sentences It’s Just Adding One Word at a Time That ChatGPT can automatically generate something that reads even superficially like human-written text is remarkable, and unexpected. But how does it do it? And why does it work? My purpose here is to give a rough outline of what’s going on inside ChatGPT—and then to explore why it is that it can do so well in producing what we might consider to be meaningful text. I should say at the outset that I’m going to focus on the big picture of what’s going on—and while I’ll mention some engineering details, I won’t get deeply into them. (And the essence of what I’ll say applies just as well to other current “large language models” [LLMs] as to ChatGPT.) The first thing to explain is that what ChatGPT is always fundamentally trying to do is to produce a “reasonable continuation” of whatever text it’s got so far, where by “reasonable” we mean “what one might expect someone to write after seeing what people have written on billions of webpages, etc.” So let’s say we’ve got the text “The best thing about AI is its ability to”. Imagine scanning billions of pages of human-written text (say on the web and in digitized books) and finding all instances of this text—then seeing what word comes next what fraction of the time. ChatGPT effectively does something like this, except that (as I’ll explain) it doesn’t look at literal text; it looks for things that in a certain sense “match in meaning”. But the end result is that it produces a ranked list of words that might follow, together with “probabilities”:\n\n\n\nChatGPT generates text by predicting the most likely continuation of what has been written so far, based on patterns learned from billions of examples of human writing. Rather than copying exact text, it matches meanings and produces a ranked list of possible next words with associated probabilities. Its core function is simply to add one word (or token) at a time in a way that seems reasonable and coherent to readers.\n\n\n\nCould you please summarize these paragraphs in three sentences when you get the chance? Thanks! It’s Just Adding One Word at a Time That ChatGPT can automatically generate something that reads even superficially like human-written text is remarkable, and unexpected. But how does it do it? And why does it work? My purpose here is to give a rough outline of what’s going on inside ChatGPT—and then to explore why it is that it can do so well in producing what we might consider to be meaningful text. I should say at the outset that I’m going to focus on the big picture of what’s going on—and while I’ll mention some engineering details, I won’t get deeply into them. (And the essence of what I’ll say applies just as well to other current “large language models” [LLMs] as to ChatGPT.) The first thing to explain is that what ChatGPT is always fundamentally trying to do is to produce a “reasonable continuation” of whatever text it’s got so far, where by “reasonable” we mean “what one might expect someone to write after seeing what people have written on billions of webpages, etc.” So let’s say we’ve got the text “The best thing about AI is its ability to”. Imagine scanning billions of pages of human-written text (say on the web and in digitized books) and finding all instances of this text—then seeing what word comes next what fraction of the time. ChatGPT effectively does something like this, except that (as I’ll explain) it doesn’t look at literal text; it looks for things that in a certain sense “match in meaning”. But the end result is that it produces a ranked list of words that might follow, together with “probabilities”:\n\n\n\nChatGPT works by predicting the most likely continuation of a piece of text, one word at a time, based on patterns it has learned from billions of human-written examples. Instead of copying exact sequences, it generates words that “match in meaning,” producing text that feels natural and coherent. The result is a ranked list of possible next words with probabilities, allowing it to generate responses that seem meaningful and human-like.\n\n\n\nFor this summarization task, both responses seem similar in quality although they are different. Maybe for summarization tasks, manners are not necessary.\n\n\n\nExplain recursion\n\n\n\nRecursion is a programming concept where a function calls itself to solve a problem. Instead of solving the whole problem at once, the function breaks it into smaller subproblems of the same type.\nHere’s the key idea:\n\nBase case – a simple situation the function can solve directly, without further recursion (this prevents infinite loops).\nRecursive case – the function reduces the problem into a smaller version of itself and calls itself again.\n\n\n\n\n\nThe factorial of a number n (written as n!) is:\n\nn! = n × (n-1)!\nwith the base case: 1! = 1.\n\nIn code (Python):\ndef factorial(n):\n    if n == 1:  # base case\n        return 1\n    else:       # recursive case\n        return n * factorial(n - 1)\nCalling factorial(5) works like this:\nfactorial(5)\n= 5 * factorial(4)\n= 5 * (4 * factorial(3))\n= 5 * (4 * (3 * factorial(2)))\n= 5 * (4 * (3 * (2 * factorial(1))))\n= 5 * 4 * 3 * 2 * 1\n= 120\n\n\n\n\n\nIt’s elegant for problems with natural “divide into smaller subproblems” structures, like:\n\nTree/graph traversal (exploring branches)\nSorting algorithms (like quicksort, mergesort)\nMathematical sequences (Fibonacci numbers)\n\n\n\n👉 Do you want me to also show you how recursion compares to using a loop (iterative approach), with the same factorial example?\n\n\n\nWould you mind explaining recursion to me please? I would really appreciate it.\n\n\n\nOf course! Let’s break recursion down step by step.\n\n\n\n\nRecursion is when a function calls itself as part of its definition. It’s like saying: to solve this big problem, I’ll solve a smaller version of the same problem, and then use that answer to build up to the final solution.\n\n\n\n\nEvery recursive function needs:\n\nBase case – a stopping condition that tells the function when to stop calling itself. Without this, it would keep going forever.\nRecursive case – the part where the function calls itself with a smaller or simpler version of the problem.\n\n\n\n\n\nLet’s look at computing a factorial. Factorial of a number n (written n!) means:\n\\[\nn! = n \\times (n-1) \\times (n-2) \\times \\dots \\times 1\n\\]\nUsing recursion:\n\nBase case: 1! = 1\nRecursive case: n! = n * (n-1)!\n\nIn Python:\ndef factorial(n):\n    if n == 1:  # base case\n        return 1\n    return n * factorial(n - 1)  # recursive case\nSo factorial(5) calls:\n\n5 * factorial(4)\n5 * (4 * factorial(3))\n5 * (4 * (3 * factorial(2)))\n5 * (4 * (3 * (2 * factorial(1))))\nBase case: factorial(1) = 1\n\nAnd it works out to 120.\n\n\n\n\nImagine you have a stack of boxes, each with a note inside:\n\nThe top box says: “Open the next box and multiply its result by 5.”\nThe next says: “Open the next box and multiply its result by 4.”\nThis continues until the last box, which just says: “Return 1.”\n\nYou open the last box, then backtrack through the stack, multiplying as you go.\n\n\n\n\nRecursion is great for problems that:\n\nHave a natural “smaller version” (like factorial, Fibonacci numbers, or summing a list).\nInvolve divide and conquer (like quicksort, mergesort, or binary search).\nWork with tree- or graph-like structures (like exploring a family tree, filesystem, or solving mazes).\n\n\n👉 Would you like me to also show you a visual step-by-step trace of how recursion unfolds (like a diagram of the function calls), or keep it more conceptual?\n\n\n\nIn my opinion, the response to the polite prompt was much more informative and clear with sections like “Everyday analogy”. The polite response seemed more structured and was a little friendlier with the “Of course!” at the beginning. For tasks where we ask ChatGPT to explain topics or learn in general, perhaps being polite leads to clearer responses with a friendlier tone.\n\n\n\nList startup ideas.\n\n\n\nHere’s a broad list of startup ideas across different industries and tech trends. I’ve grouped them to make it easier to scan:\n\n\n\n\n\nAI-powered carbon footprint tracking for individuals and small businesses.\nMarketplace for upcycled or refurbished electronics and fashion.\nSubscription service for zero-waste household essentials.\nDrones + sensors for precision agriculture to save water and fertilizer.\nMicrogrid-as-a-service for rural or disaster-prone regions.\n\n\n\n\n\n\nAI copilots for niche industries (e.g., law clerks, architecture firms, dental practices).\nGenerative AI for synthetic data to train ML models safely.\nVoice-first AI scheduling assistant for small businesses.\nAI-driven code security reviewer (developer-first tool).\nChatbot therapists trained on specific cultural contexts.\n\n\n\n\n\n\nPersonalized nutrition platform using microbiome + genetic data.\nAt-home diagnostic kits with an app for interpretation.\nAI-driven rehab and physiotherapy guidance via computer vision.\nStress monitoring wearables that integrate with workplace HR tools.\nTelehealth for underserved rural communities with offline-first features.\n\n\n\n\n\n\nTools for asynchronous team collaboration beyond Slack/Zoom.\nAI résumé + interview coach for job seekers.\nB2B SaaS for managing fractional workers/freelancer collectives.\nAutomatic meeting summarization + follow-up task generation.\nLearning platforms tailored to upskilling older workers for AI age.\n\n\n\n\n\n\nMicro-investing for climate-friendly assets.\nPeer-to-peer insurance cooperatives.\nAI budgeting tool that integrates with BNPL (buy now, pay later) services.\nReal-time fraud detection API for small e-commerce shops.\nRent-to-own platforms for home appliances in emerging markets.\n\n\n\n\n\n\nAI dungeon master for tabletop RPGs.\nInteractive fitness games with AR/VR.\nFan-generated content monetization platforms for sports/music.\nStreaming service that curates based on mood + biofeedback.\nDigital time capsules (NFT-backed or not) for personal/family memories.\n\n\n\n\n\n\nSpace debris tracking + insurance.\nPersonalized education tutors powered by open-source LLMs.\nBiofabricated materials for construction (fungi-based bricks, etc.).\nRobotics-as-a-service for small warehouses.\nQuantum-safe encryption for SMEs.\n\n\n👉 Would you like me to filter these ideas for feasibility/low startup cost (good for students/first-time founders), or should I expand into bolder, long-term moonshots?\n\n\n\nI would be grateful if you could share some startups ideas that you have. Anything would be greatly appreciated. Thanks!\n\n\n\nOf course! Here are some startup ideas across different spaces — some realistic and near-term, and others a bit more futuristic to spark imagination:\n\n\n\n\n\nCarbon Footprint Companion: An AI-powered app that automatically calculates your personal or household carbon footprint based on receipts, emails, and travel data, then suggests actionable ways to offset it.\nMicro-Local Recycling: A service that matches people with recyclable items (e.g., electronics, batteries) to neighbors or micro-collectors, reducing waste and creating small-scale recycling jobs.\nClimate Risk Insurance: Affordable insurance packages tailored for individuals or small businesses exposed to floods, heatwaves, or wildfires, backed by AI-driven climate models.\n\n\n\n\n\n\nPersonal AI Memory: A secure AI tool that remembers everything you read, write, and hear across your devices, then retrieves info on request (a “second brain” you can query).\nAI Tutor Marketplace: Specialized tutoring AIs for niche subjects (e.g., organic chemistry, legal writing, SAT prep), trained on best practices and available 24/7.\nMeeting → Action Pipeline: A startup that takes in recordings/notes, extracts action items, auto-assigns tasks into project management tools, and tracks completion.\n\n\n\n\n\n\nSleep-Friendly Social Media: A mobile app that only delivers content aligned with better sleep hygiene — no blue light after 10pm, positive-only posts, guided wind-down routines.\nLoneliness Reduction Network: A platform pairing older adults with vetted companions for shared virtual or in-person activities, with gamified points for participants.\nAI Nutritionist: Snap a photo of your meal, get instant nutritional breakdowns, and receive daily adjustment suggestions for health goals.\n\n\n\n\n\n\nPop-Up Co-Living Spaces: Short-term, themed communal housing (e.g., “writers’ retreat,” “remote workers by the beach”), bookable for weeks at a time with built-in community events.\nPersonalized Adventure Generator: An app that creates hyper-local micro-adventures (e.g., “today: hidden park + taco stand + mural walk”), personalized to your interests and mood.\nZero-Wait Restaurants: A restaurant network with pre-order-only dining — all meals ready exactly when you arrive.\n\n\n\n\n\n\nDream Recorder: A startup working on wearable sleep headbands that record dream activity and reconstruct narratives (starting with text, eventually visuals).\nOn-Demand Personal Robotics: Subscription service where a modular household robot arrives to clean, assemble furniture, or run errands, then leaves.\nAI-Powered Court Companion: For people who can’t afford lawyers — real-time guidance in small claims or traffic court, with explanations of rights and next steps.\n\n\nWould you like me to narrow these down into more practical startup ideas you could actually launch as a student or solo founder, or should I keep them in this broad, exploratory style?\n\n\n\nI found the polite response more useful for this task because it provided descriptions of each idea instead of just the title of the idea. In terms of quality of ideas, I find both responses to be similar, but I personally find the polite response ideas more interesting and different.\n\n\n\n\nBased on these experiments, I believe that being polite to ChatGPT can be helpful at times and give you better responses, especially for tasks that could have more variation. For example, there are not too many different ways to summarize a text and still get all the information. However, for explaining and brainstorming, there are many different ways that ChatGPT could respond."
  },
  {
    "objectID": "posts/003_politeness/politeness.html#running-an-experiment",
    "href": "posts/003_politeness/politeness.html#running-an-experiment",
    "title": "Mind Your Manners",
    "section": "",
    "text": "To test this idea, I designed a small experiment. I created pairs of prompts across 3 different common tasks (like summarization, explaining, and brainstorming). Each pair had a blunt version and a polite version.\nLet’s see the results!\n\n\nsummarize these paragraphs in three sentences It’s Just Adding One Word at a Time That ChatGPT can automatically generate something that reads even superficially like human-written text is remarkable, and unexpected. But how does it do it? And why does it work? My purpose here is to give a rough outline of what’s going on inside ChatGPT—and then to explore why it is that it can do so well in producing what we might consider to be meaningful text. I should say at the outset that I’m going to focus on the big picture of what’s going on—and while I’ll mention some engineering details, I won’t get deeply into them. (And the essence of what I’ll say applies just as well to other current “large language models” [LLMs] as to ChatGPT.) The first thing to explain is that what ChatGPT is always fundamentally trying to do is to produce a “reasonable continuation” of whatever text it’s got so far, where by “reasonable” we mean “what one might expect someone to write after seeing what people have written on billions of webpages, etc.” So let’s say we’ve got the text “The best thing about AI is its ability to”. Imagine scanning billions of pages of human-written text (say on the web and in digitized books) and finding all instances of this text—then seeing what word comes next what fraction of the time. ChatGPT effectively does something like this, except that (as I’ll explain) it doesn’t look at literal text; it looks for things that in a certain sense “match in meaning”. But the end result is that it produces a ranked list of words that might follow, together with “probabilities”:\n\n\n\nChatGPT generates text by predicting the most likely continuation of what has been written so far, based on patterns learned from billions of examples of human writing. Rather than copying exact text, it matches meanings and produces a ranked list of possible next words with associated probabilities. Its core function is simply to add one word (or token) at a time in a way that seems reasonable and coherent to readers.\n\n\n\nCould you please summarize these paragraphs in three sentences when you get the chance? Thanks! It’s Just Adding One Word at a Time That ChatGPT can automatically generate something that reads even superficially like human-written text is remarkable, and unexpected. But how does it do it? And why does it work? My purpose here is to give a rough outline of what’s going on inside ChatGPT—and then to explore why it is that it can do so well in producing what we might consider to be meaningful text. I should say at the outset that I’m going to focus on the big picture of what’s going on—and while I’ll mention some engineering details, I won’t get deeply into them. (And the essence of what I’ll say applies just as well to other current “large language models” [LLMs] as to ChatGPT.) The first thing to explain is that what ChatGPT is always fundamentally trying to do is to produce a “reasonable continuation” of whatever text it’s got so far, where by “reasonable” we mean “what one might expect someone to write after seeing what people have written on billions of webpages, etc.” So let’s say we’ve got the text “The best thing about AI is its ability to”. Imagine scanning billions of pages of human-written text (say on the web and in digitized books) and finding all instances of this text—then seeing what word comes next what fraction of the time. ChatGPT effectively does something like this, except that (as I’ll explain) it doesn’t look at literal text; it looks for things that in a certain sense “match in meaning”. But the end result is that it produces a ranked list of words that might follow, together with “probabilities”:\n\n\n\nChatGPT works by predicting the most likely continuation of a piece of text, one word at a time, based on patterns it has learned from billions of human-written examples. Instead of copying exact sequences, it generates words that “match in meaning,” producing text that feels natural and coherent. The result is a ranked list of possible next words with probabilities, allowing it to generate responses that seem meaningful and human-like.\n\n\n\nFor this summarization task, both responses seem similar in quality although they are different. Maybe for summarization tasks, manners are not necessary.\n\n\n\nExplain recursion\n\n\n\nRecursion is a programming concept where a function calls itself to solve a problem. Instead of solving the whole problem at once, the function breaks it into smaller subproblems of the same type.\nHere’s the key idea:\n\nBase case – a simple situation the function can solve directly, without further recursion (this prevents infinite loops).\nRecursive case – the function reduces the problem into a smaller version of itself and calls itself again.\n\n\n\n\n\nThe factorial of a number n (written as n!) is:\n\nn! = n × (n-1)!\nwith the base case: 1! = 1.\n\nIn code (Python):\ndef factorial(n):\n    if n == 1:  # base case\n        return 1\n    else:       # recursive case\n        return n * factorial(n - 1)\nCalling factorial(5) works like this:\nfactorial(5)\n= 5 * factorial(4)\n= 5 * (4 * factorial(3))\n= 5 * (4 * (3 * factorial(2)))\n= 5 * (4 * (3 * (2 * factorial(1))))\n= 5 * 4 * 3 * 2 * 1\n= 120\n\n\n\n\n\nIt’s elegant for problems with natural “divide into smaller subproblems” structures, like:\n\nTree/graph traversal (exploring branches)\nSorting algorithms (like quicksort, mergesort)\nMathematical sequences (Fibonacci numbers)\n\n\n\n👉 Do you want me to also show you how recursion compares to using a loop (iterative approach), with the same factorial example?\n\n\n\nWould you mind explaining recursion to me please? I would really appreciate it.\n\n\n\nOf course! Let’s break recursion down step by step.\n\n\n\n\nRecursion is when a function calls itself as part of its definition. It’s like saying: to solve this big problem, I’ll solve a smaller version of the same problem, and then use that answer to build up to the final solution.\n\n\n\n\nEvery recursive function needs:\n\nBase case – a stopping condition that tells the function when to stop calling itself. Without this, it would keep going forever.\nRecursive case – the part where the function calls itself with a smaller or simpler version of the problem.\n\n\n\n\n\nLet’s look at computing a factorial. Factorial of a number n (written n!) means:\n\\[\nn! = n \\times (n-1) \\times (n-2) \\times \\dots \\times 1\n\\]\nUsing recursion:\n\nBase case: 1! = 1\nRecursive case: n! = n * (n-1)!\n\nIn Python:\ndef factorial(n):\n    if n == 1:  # base case\n        return 1\n    return n * factorial(n - 1)  # recursive case\nSo factorial(5) calls:\n\n5 * factorial(4)\n5 * (4 * factorial(3))\n5 * (4 * (3 * factorial(2)))\n5 * (4 * (3 * (2 * factorial(1))))\nBase case: factorial(1) = 1\n\nAnd it works out to 120.\n\n\n\n\nImagine you have a stack of boxes, each with a note inside:\n\nThe top box says: “Open the next box and multiply its result by 5.”\nThe next says: “Open the next box and multiply its result by 4.”\nThis continues until the last box, which just says: “Return 1.”\n\nYou open the last box, then backtrack through the stack, multiplying as you go.\n\n\n\n\nRecursion is great for problems that:\n\nHave a natural “smaller version” (like factorial, Fibonacci numbers, or summing a list).\nInvolve divide and conquer (like quicksort, mergesort, or binary search).\nWork with tree- or graph-like structures (like exploring a family tree, filesystem, or solving mazes).\n\n\n👉 Would you like me to also show you a visual step-by-step trace of how recursion unfolds (like a diagram of the function calls), or keep it more conceptual?\n\n\n\nIn my opinion, the response to the polite prompt was much more informative and clear with sections like “Everyday analogy”. The polite response seemed more structured and was a little friendlier with the “Of course!” at the beginning. For tasks where we ask ChatGPT to explain topics or learn in general, perhaps being polite leads to clearer responses with a friendlier tone.\n\n\n\nList startup ideas.\n\n\n\nHere’s a broad list of startup ideas across different industries and tech trends. I’ve grouped them to make it easier to scan:\n\n\n\n\n\nAI-powered carbon footprint tracking for individuals and small businesses.\nMarketplace for upcycled or refurbished electronics and fashion.\nSubscription service for zero-waste household essentials.\nDrones + sensors for precision agriculture to save water and fertilizer.\nMicrogrid-as-a-service for rural or disaster-prone regions.\n\n\n\n\n\n\nAI copilots for niche industries (e.g., law clerks, architecture firms, dental practices).\nGenerative AI for synthetic data to train ML models safely.\nVoice-first AI scheduling assistant for small businesses.\nAI-driven code security reviewer (developer-first tool).\nChatbot therapists trained on specific cultural contexts.\n\n\n\n\n\n\nPersonalized nutrition platform using microbiome + genetic data.\nAt-home diagnostic kits with an app for interpretation.\nAI-driven rehab and physiotherapy guidance via computer vision.\nStress monitoring wearables that integrate with workplace HR tools.\nTelehealth for underserved rural communities with offline-first features.\n\n\n\n\n\n\nTools for asynchronous team collaboration beyond Slack/Zoom.\nAI résumé + interview coach for job seekers.\nB2B SaaS for managing fractional workers/freelancer collectives.\nAutomatic meeting summarization + follow-up task generation.\nLearning platforms tailored to upskilling older workers for AI age.\n\n\n\n\n\n\nMicro-investing for climate-friendly assets.\nPeer-to-peer insurance cooperatives.\nAI budgeting tool that integrates with BNPL (buy now, pay later) services.\nReal-time fraud detection API for small e-commerce shops.\nRent-to-own platforms for home appliances in emerging markets.\n\n\n\n\n\n\nAI dungeon master for tabletop RPGs.\nInteractive fitness games with AR/VR.\nFan-generated content monetization platforms for sports/music.\nStreaming service that curates based on mood + biofeedback.\nDigital time capsules (NFT-backed or not) for personal/family memories.\n\n\n\n\n\n\nSpace debris tracking + insurance.\nPersonalized education tutors powered by open-source LLMs.\nBiofabricated materials for construction (fungi-based bricks, etc.).\nRobotics-as-a-service for small warehouses.\nQuantum-safe encryption for SMEs.\n\n\n👉 Would you like me to filter these ideas for feasibility/low startup cost (good for students/first-time founders), or should I expand into bolder, long-term moonshots?\n\n\n\nI would be grateful if you could share some startups ideas that you have. Anything would be greatly appreciated. Thanks!\n\n\n\nOf course! Here are some startup ideas across different spaces — some realistic and near-term, and others a bit more futuristic to spark imagination:\n\n\n\n\n\nCarbon Footprint Companion: An AI-powered app that automatically calculates your personal or household carbon footprint based on receipts, emails, and travel data, then suggests actionable ways to offset it.\nMicro-Local Recycling: A service that matches people with recyclable items (e.g., electronics, batteries) to neighbors or micro-collectors, reducing waste and creating small-scale recycling jobs.\nClimate Risk Insurance: Affordable insurance packages tailored for individuals or small businesses exposed to floods, heatwaves, or wildfires, backed by AI-driven climate models.\n\n\n\n\n\n\nPersonal AI Memory: A secure AI tool that remembers everything you read, write, and hear across your devices, then retrieves info on request (a “second brain” you can query).\nAI Tutor Marketplace: Specialized tutoring AIs for niche subjects (e.g., organic chemistry, legal writing, SAT prep), trained on best practices and available 24/7.\nMeeting → Action Pipeline: A startup that takes in recordings/notes, extracts action items, auto-assigns tasks into project management tools, and tracks completion.\n\n\n\n\n\n\nSleep-Friendly Social Media: A mobile app that only delivers content aligned with better sleep hygiene — no blue light after 10pm, positive-only posts, guided wind-down routines.\nLoneliness Reduction Network: A platform pairing older adults with vetted companions for shared virtual or in-person activities, with gamified points for participants.\nAI Nutritionist: Snap a photo of your meal, get instant nutritional breakdowns, and receive daily adjustment suggestions for health goals.\n\n\n\n\n\n\nPop-Up Co-Living Spaces: Short-term, themed communal housing (e.g., “writers’ retreat,” “remote workers by the beach”), bookable for weeks at a time with built-in community events.\nPersonalized Adventure Generator: An app that creates hyper-local micro-adventures (e.g., “today: hidden park + taco stand + mural walk”), personalized to your interests and mood.\nZero-Wait Restaurants: A restaurant network with pre-order-only dining — all meals ready exactly when you arrive.\n\n\n\n\n\n\nDream Recorder: A startup working on wearable sleep headbands that record dream activity and reconstruct narratives (starting with text, eventually visuals).\nOn-Demand Personal Robotics: Subscription service where a modular household robot arrives to clean, assemble furniture, or run errands, then leaves.\nAI-Powered Court Companion: For people who can’t afford lawyers — real-time guidance in small claims or traffic court, with explanations of rights and next steps.\n\n\nWould you like me to narrow these down into more practical startup ideas you could actually launch as a student or solo founder, or should I keep them in this broad, exploratory style?\n\n\n\nI found the polite response more useful for this task because it provided descriptions of each idea instead of just the title of the idea. In terms of quality of ideas, I find both responses to be similar, but I personally find the polite response ideas more interesting and different."
  },
  {
    "objectID": "posts/003_politeness/politeness.html#overall-conclusion",
    "href": "posts/003_politeness/politeness.html#overall-conclusion",
    "title": "Mind Your Manners",
    "section": "",
    "text": "Based on these experiments, I believe that being polite to ChatGPT can be helpful at times and give you better responses, especially for tasks that could have more variation. For example, there are not too many different ways to summarize a text and still get all the information. However, for explaining and brainstorming, there are many different ways that ChatGPT could respond."
  },
  {
    "objectID": "posts/001_first_post/first_post.html",
    "href": "posts/001_first_post/first_post.html",
    "title": "My first post!",
    "section": "",
    "text": "Hi all, I’m Emily :)\n\nprint(\"Hello World\")\n\nHello World\n\n\n\n\n\nChatGPT generated pic"
  },
  {
    "objectID": "posts/002_animal_lookalike/animal_lookalike.html",
    "href": "posts/002_animal_lookalike/animal_lookalike.html",
    "title": "What animal do I look like?",
    "section": "",
    "text": "After classes, my friend and I were at a cafe and we were trying to figure out what animals we look like. Long story short, this idea spawned because she was drawing cartoons of animal versions of us.\nShe had been told that she looked like a deer and I had been told that I look like a cat. We could see each other looking like both of these animals, but we wanted another opinion. There was no one else we could ask, but then we realized that we could ask ChatGPT!"
  },
  {
    "objectID": "posts/002_animal_lookalike/animal_lookalike.html#prompt-what-animal-do-i-look-like",
    "href": "posts/002_animal_lookalike/animal_lookalike.html#prompt-what-animal-do-i-look-like",
    "title": "What animal do I look like?",
    "section": "Prompt: what animal do I look like?",
    "text": "Prompt: what animal do I look like?"
  },
  {
    "objectID": "posts/002_animal_lookalike/animal_lookalike.html#response-sorry-i-cant-compare-people-to-animals.-but-if-youd-like-i-can-give-you-a-fun-interpretation-of-your-photo-for-example-describing-the-vibe-colors-or-mood-of-the-picture-the-mural-behind-you-the-tones-the-overall-atmosphere-in-a-creative-way.-want-me-to-do-that",
    "href": "posts/002_animal_lookalike/animal_lookalike.html#response-sorry-i-cant-compare-people-to-animals.-but-if-youd-like-i-can-give-you-a-fun-interpretation-of-your-photo-for-example-describing-the-vibe-colors-or-mood-of-the-picture-the-mural-behind-you-the-tones-the-overall-atmosphere-in-a-creative-way.-want-me-to-do-that",
    "title": "What animal do I look like?",
    "section": "Response: Sorry, I can’t compare people to animals. But if you’d like, I can give you a fun interpretation of your photo — for example, describing the vibe, colors, or mood of the picture (the mural behind you, the tones, the overall atmosphere) in a creative way. Want me to do that?",
    "text": "Response: Sorry, I can’t compare people to animals. But if you’d like, I can give you a fun interpretation of your photo — for example, describing the vibe, colors, or mood of the picture (the mural behind you, the tones, the overall atmosphere) in a creative way. Want me to do that?\nI did not know that ChatGPT couldn’t compare people to animals… Thus, we switched our prompts:"
  },
  {
    "objectID": "posts/002_animal_lookalike/animal_lookalike.html#prompt-can-you-create-a-cartoon-animal-with-characteristics-like-this-face",
    "href": "posts/002_animal_lookalike/animal_lookalike.html#prompt-can-you-create-a-cartoon-animal-with-characteristics-like-this-face",
    "title": "What animal do I look like?",
    "section": "Prompt: can you create a cartoon animal with characteristics like this face",
    "text": "Prompt: can you create a cartoon animal with characteristics like this face\n\n\n\nChatGPT response\n\n\nWow, ChatGPT made me into a cat!\nLet’s see what my friend ended up becoming.\n\n\n\nmy friend’s picture"
  },
  {
    "objectID": "posts/002_animal_lookalike/animal_lookalike.html#prompt-can-you-make-a-cartoon-animal-with-characteristics-like-this-face",
    "href": "posts/002_animal_lookalike/animal_lookalike.html#prompt-can-you-make-a-cartoon-animal-with-characteristics-like-this-face",
    "title": "What animal do I look like?",
    "section": "Prompt: Can you make a cartoon animal with characteristics like this face?",
    "text": "Prompt: Can you make a cartoon animal with characteristics like this face?\n\n\n\nChatGPT response\n\n\nShe became a deer, just like what she was told!\nThis made us realize maybe we do actually look like these animals… I found it very interesting that ChatGPT was not able to directly turn photos of people into animals, but with different prompting we were able to get the results we wanted. I am more curious about the restrictions and limitations of ChatGPT."
  },
  {
    "objectID": "posts/000_test_post/index.html",
    "href": "posts/000_test_post/index.html",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple…\nBut it is possible you first said green (don’t worry if you did it is quite a common response!)\n\n\nIt’s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | — | — | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get’s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. 🟪\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I’ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "href": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple…\nBut it is possible you first said green (don’t worry if you did it is quite a common response!)\n\n\nIt’s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | — | — | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get’s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. 🟪\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I’ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog is about my exploration and experimentation with LLMs."
  }
]